from flask import Flask, render_template, request
from flask_wtf import FlaskForm
from wtforms import RadioField, StringField
from wtforms.validators import InputRequired, Length
from flask_migrate import Migrate
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
CSRF_ENABLED = True
SECRET_KEY = 'b706835de79a2b4e80506f582af3676a'
app.secret_key = 'b706835de79a2b4e80506f582af3676a'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///base.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
WTF_CSRF_SECRET_KEY = 'b706835de79a2b4e80506f582af3676a'

db = SQLAlchemy(app)
migrate = Migrate(app, db)


class Teachers(db.Model):
    """ –ú–æ–¥–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π """
    __tablename__ = 'teachers'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String, nullable=False)
    about = db.Column(db.String, nullable=False)
    rating = db.Column(db.Float, nullable=False)
    picture = db.Column(db.String, nullable=False)
    price = db.Column(db.Integer, nullable=False)
    lesson_time = db.Column(db.String)
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª–∏ —Ü–µ–ª–∏ (One-to-Many)
    goals = db.relationship("Goals", back_populates="goal")
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª–∏ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ (One-to-Many)
    week_day = db.relationship("TimetableTeachers", back_populates="week")


class Goals(db.Model):
    """ –ú–æ–¥–µ–ª—å —Ü–µ–ª–µ–π –∑–∞–Ω—è—Ç–∏–π """
    __tablename__ = 'goals'
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String, nullable=False)
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (One-to-Many)
    teachers_id = db.Column(db.Integer, db.ForeignKey("teachers.id"))
    goal = db.relationship("Teachers", back_populates="goals", uselist=False)

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª–∏ –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (One-to-Many)
    search_teacher = db.relationship("SearchTeacher", back_populates="goal", uselist=False)


class TimetableTeachers(db.Model):
    """ –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é """
    __tablename__ = 'timetables'
    id = db.Column(db.Integer, primary_key=True)
    day_times = db.Column(db.String, nullable=False)
    status = db.Column(db.Boolean, nullable=False)
    # —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ id –≤ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (One-to-Many)
    teachers_id = db.Column(db.Integer, db.ForeignKey("teachers.id"))
    week = db.relationship("Teachers", back_populates="week_day", uselist=False)
    # —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ id –≤ –º–æ–¥–µ–ª–∏ booking (One-to-Many)
    booking = db.relationship("Booking", back_populates='day_times', uselist=False)


class SearchTeacher(db.Model):
    """ –ú–æ–¥–µ–ª—å –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: —Ü–µ–ª–∏ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –∑–∞–Ω—è—Ç–∏–π –≤ –Ω–µ–¥–µ–ª—é """
    __tablename__ = 'search_teachers'
    id = db.Column(db.Integer, primary_key=True)
    how_time = db.Column(db.String(20), nullable=False)
    client_name = db.Column(db.String(25), nullable=False)
    client_phone = db.Column(db.String(10), nullable=False)
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª–∏ —Ü–µ–ª–∏ (One-to-Many)
    goal_id = db.Column(db.Integer, db.ForeignKey("goals.id"))
    goal = db.relationship("Goals", back_populates="search_teacher", uselist=False)


class Booking(db.Model):
    """ –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é """
    __tablename__ = 'booking'
    id = db.Column(db.Integer, primary_key=True)
    client_name = db.Column(db.String(25), nullable=False)
    client_phone = db.Column(db.String(10), nullable=False)
    # —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ id –≤ –º–æ–¥–µ–ª–∏ Teachers (One-to-Many)
    timetable_id = db.Column(db.Integer, db.ForeignKey("timetables.id"))
    # —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ free –∏ day –≤ –º–æ–¥–µ–ª–∏ TimetableTeachers (One-to-One)
    day_times = db.relationship("TimetableTeachers", back_populates="booking", uselist=False)


def add_record(name, about, rating, price, goal, lesson_time):
    teacher = Teachers(name=name, about=about, rating=rating, price=price, goal=goal, lesson_time=lesson_time)
    db.session.add(teacher)
    db.session.commit()
    return teacher.id  # id –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –ë–î


class RequestForm(FlaskForm):  # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Ñ–æ—Ä–º—ã –¥–ª—è WTForms
    name = StringField('name', [InputRequired(), Length(min=2)])
    phone = StringField('phone', [InputRequired(), Length(min=6, max=12)])
    goal = RadioField("–ö–∞–∫–∞—è —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏–π?",
                      choices=[('0', '‚õ± –î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'), ('1', 'üè´ –î–ª—è —É—á–µ–±—ã'), ('2', 'üè¢ –î–ª—è —Ä–∞–±–æ—Ç—ã'),
                               ('3', 'üöú –î–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞'), ('4', 'üíª –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è')])
    time = RadioField("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å—Ç—å?",
                      choices=[('0', '1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é'), ('1', '3-5 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'),
                               ('2', '5-7 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'), ('3', '7-10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é')])


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π (–¥–ª—è —É—á–µ–±—ã, —Ä–∞–±–æ—Ç—ã –∏ —Ç.–¥.)
def query_goals():
    dict_id_teachers_goals = {}
    dict_goals_unique = {}
    # —Ç—É—Ç –∫–æ—Å—Ç—ã–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π, (–∏—Å—Ö–æ–¥–Ω—ã–µ —Ü–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏–∑ data.json)
    # –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –±–µ–∑ –∏–∫–æ–Ω–æ–∫ –∏ –æ–Ω–∏ —Ç–æ–∂–µ –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏.
    # –†–µ—à–µ–Ω–∏–µ: –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –º–æ–¥–µ–ª—å goals.
    goals_unique = db.session.query(Goals.id, Goals.key).distinct(Goals.key).limit(6)

    # —Ü–µ–ª–∏ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–∂–µ –∫–æ—Å—Ç—ã–ª—å, –º–æ–¥–µ–ª—å –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å)
    goals_all = db.session.query(Goals.id, Goals.teachers_id, Goals.key)

    for id, key in goals_unique.all():
        dict_goals_unique[id] = key

    for id, key, id_teacher in goals_all.all():
        dict_id_teachers_goals[id] = (str(id_teacher)) + '' + str(key)

    all_goals = [dict_goals_unique, dict_id_teachers_goals]
    return all_goals


list_goal = []
goal = db.session.query(Goals.key).distinct().limit(5)
for g in goal:
    list_goal.append(*g)



@app.route('/')  # –≥–ª–∞–≤–Ω–∞—è
def index():
    teachers_query = db.session.query(Teachers).order_by(Teachers.rating).limit(6)
    global list_goal
    return render_template("index.html", goals=list_goal, teachers=teachers_query.all())


@app.route('/teachers/')  # –≤—Å–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã
def teachers():
    teachers_query = db.session.query(Teachers).order_by(Teachers.rating)
    return render_template("teachers.html", goals=query_goals(), teachers=teachers_query.all())


@app.route('/goals/<goal>/')  # —Ü–µ–ª—å 'goal'
def goals(goal):
    teachers_query = db.session.query(Teachers).order_by(Teachers.rating)
    return render_template("goals.html", goal=goal, goals=query_goals(), all_data=all_data,
                           teachers=teachers_query.all())


@app.route('/profiles/<int:id_teacher>/')  # –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ <id —É—á–∏—Ç–µ–ª—è>
def profiles(id_teacher):
    teacher = db.session.query(Teachers).get_or_404(id_teacher)  # –µ—Å–ª–∏ id –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
    timetable_teacher = db.session.query(TimetableTeachers).order_by(TimetableTeachers.id).limit(56)
    list_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

    return render_template("profiles.html", id_techer=id_teacher, timetable_teacher=timetable_teacher,
                           days=list_days, teacher=teacher)


@app.route('/request_teacher/', methods=['GET', 'POST'])  # –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–±–æ—Ä —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
def request_teacher():
    form = RequestForm()
    # –ü—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    if request.method == "POST" and form.validate():
        goal_choices = {'0': '‚õ± –î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', '1': 'üè´ –î–ª—è —É—á–µ–±—ã', '2': 'üè¢ –î–ª—è —Ä–∞–±–æ—Ç—ã',
                        '3': 'üöú –î–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞', '4': 'üíª –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è'}
        time_choices = {'0': '1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é', '1': '3-5 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é', '2': '5-7 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é',
                        '3': '7-10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'}

        teacher = SearchTeacher(
            how_time=time_choices[form.time.data],
            client_name=form.name.data,
            client_phone=form.phone.data,
        )

        goal = Goals(
            key=goal_choices[form.goal.data],
            search_teacher=teacher
        )
        try:
            db.session.add(teacher)
            db.session.add(goal)
            db.session.commit()
        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –≤ –ë–î –ø—Ä–∏–≤–µ–ª –∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—é –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        except Exception:
            render_template('404.html')

        return render_template("request_done.html", username=form.name.data, userphone=form.phone.data,
                               goal=goal_choices[form.goal.data], time=time_choices[form.time.data])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GET
    return render_template("request.html", form=form)


@app.route('/booking/<int:id_teacher>/<day>/<time>/',
           methods=['GET', 'POST'])  # –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è <id —É—á–∏—Ç–µ–ª—è>
def booking(id_teacher, day, time):
    # –ü—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    if request.method == "POST":
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω—ã–Ω–µ –∏–∑ —Ñ–æ—Ä–º—ã
        client_weekday = request.form["clientWeekday"]
        client_time = request.form["clientTime"]
        teacher = request.form["clientTeacher"]
        client_name = request.form["clientName"]
        client_phone = request.form["clientPhone"]

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        booking_teacher = Booking(
            client_name=client_name,
            client_phone=client_phone
        )

        db.session.add(booking_teacher)
        try:
            db.session.commit()
        except:
            return render_template("404.html")

        return render_template("booking_done.html", clientName=client_name, clientPhone=client_phone,
                               time=client_time, clientTeacher=teacher, day=client_weekday)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GET
    teacher = db.session.query(Teachers).get_or_404(id_teacher)

    return render_template("booking.html", teacher=teacher, day=day, time=time)


if __name__ == "__main__":
    app.run('0.0.0.0', debug=True)
